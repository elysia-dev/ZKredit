import {task} from "hardhat/config";

const Operators = {
  NOOP : 0, // No operation, skip query verification in circuit
  EQ : 1, // equal
  LT : 2, // less than
  GT : 3, // greater than
  IN : 4, // in
  NIN : 5, // not in
  NE : 6   // not equal
}

export const setRequestERC721Task = task("setRequestERC721", "set request for ERC721")
  .setAction(
    async (taskArgs, hre) => {
      // The CredentialAtomicQuerySigValidator contract is used to verify any claim-related zk proof generated by user using the credentialAtomicQuerySig circuit.
      // https://0xpolygonid.github.io/tutorials/contracts/overview/#credentialatomicquerysigvalidator
      const circuitId = "credentialAtomicQuerySigV2OnChain";

      // CredentialAtomicQuerySigValidator Mumbai address
      const validatorAddress = "0xF2D4Eeb4d455fb673104902282Ce68B9ce4Ac450";

      // Query language: https://0xpolygonid.github.io/tutorials/verifier/verification-library/zk-query-language/
      // you can run https://go.dev/play/p/rnrRbxXTRY6 to get schema hash and claimPathKey using YOUR schema

      const schemaBigInt = "280043010003679730848050096244820814941"

      // merklized path to field in the W3C credential according to JSONLD  schema e.g. birthday in the KYCAgeCredential under the url "https://raw.githubusercontent.com/iden3/claim-schema-vocab/main/schemas/json-ld/kyc-v3.json-ld"
      const schemaClaimPathKey = "213410079183024085803743552282540355680931133747956637179646511624433001072"

      const query = {
        schema: schemaBigInt,
        claimPathKey  : schemaClaimPathKey,
        operator: Operators.GT, // operator
        value: [100, ...new Array(63).fill(0).map(i => 0)], // for operators 1-3 only first value matters
      };

      // add the address of the contract just deployed
      const ERC721VerifierAddress = (await hre.deployments.get("ERC721Verifier")).address

      let erc721Verifier = await hre.ethers.getContractAt(
        "ERC721Verifier",
        ERC721VerifierAddress
      );

      const requestId = await erc721Verifier.TRANSFER_REQUEST_ID();
      console.log("requestId: ", requestId)

      try {
        await erc721Verifier.setZKPRequest(
          requestId,
          validatorAddress,
          query.schema,
          query.claimPathKey,
          query.operator,
          query.value
        );
        console.log("Request set");
      } catch (e) {
        console.log("error: ", e);
      }
    }
  )
